{"version":3,"sources":["F:/chatbot-aoto-testing/src/$_lazy_route_resource lazy","F:/chatbot-aoto-testing/src/app/app.component.css","F:/chatbot-aoto-testing/src/app/app.component.html","F:/chatbot-aoto-testing/src/app/app.component.ts","F:/chatbot-aoto-testing/src/app/app.module.ts","F:/chatbot-aoto-testing/src/environments/environment.ts","F:/chatbot-aoto-testing/src/main.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../../../../../src/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// F:/chatbot-aoto-testing/src/$$_lazy_route_resource lazy\n// module id = ../../../../../src/$$_lazy_route_resource lazy recursive\n// module chunks = main","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".container{\\r\\n    width:  100% !important;\\r\\n}\\r\\n.row{\\r\\n    width: 100% !important;\\r\\n}\\r\\n.testResults{\\r\\n    margin-top: 20px;\\r\\n}\\r\\n.testData{\\r\\n    padding: 5px;\\r\\n}\\r\\n.tableData{\\r\\n    margin-top: 20px;\\r\\n}\\r\\ntable:hover{\\r\\n    cursor: pointer;\\r\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// F:/chatbot-aoto-testing/src/app/app.component.css\n// module id = ../../../../../src/app/app.component.css\n// module chunks = main","module.exports = \"<div class=\\\"container\\\">\\n\\n    <h2 class=\\\"text-center\\\">\\n        Chatbot Testing Tool\\n        <blockquote class=\\\"blockquote text-center\\\">\\n            <footer class=\\\"blockquote-footer\\\">Automate testing of\\n                <cite title=\\\"Source Title\\\">Chatbot</cite>\\n            </footer>\\n        </blockquote>\\n    </h2>\\n\\n    <div class=\\\"container\\\">\\n        <h4>\\n            <mark>Instruction for Testing</mark>\\n        </h4>\\n        <ol>\\n            <li>Upload a file which containes the test data for Chatbot</li>\\n            <li>Click on\\n                <mark>Start Testing</mark> button to start the testing</li>\\n            <li>Once testing is complete, you will see the results in form of table</li>\\n            <li>This table can be exported as an Excel file</li>\\n            <small>\\n                <p>\\n                    The file upload functionality can either be used with a text file that contains test data in form of json, or with an excel\\n                    file.\\n                </p>\\n                The enteries in the text file should be in following format:\\n                <p>\\n                    {{ '{' }} \\\"query 1\\\": \\\"expected Response 1\\\", \\\"query 2\\\": \\\"expected Response 2\\\" {{ '}' }}\\n                </p>\\n            </small>\\n        </ol>\\n    </div>\\n\\n    <div class=\\\"form-inline\\\">\\n        <div class=\\\"form-group\\\">\\n            <input type=\\\"file\\\" class=\\\"form-control-file mb-2 mr-sm-2\\\" id=\\\"fileForUpload\\\" (change)=\\\"upload()\\\">\\n        </div>\\n        <button type=\\\"button\\\" class=\\\"btn btn-info\\\" (click)=\\\"startTesting()\\\">Start testing</button>\\n    </div>\\n\\n    <div class=\\\"container testResults\\\" id=\\\"testData\\\">\\n        <ng-container *ngIf=\\\"tableView\\\">\\n            <h5>Test reults</h5>\\n            <div class=\\\"row border rounded testData\\\">\\n                <div class=\\\"col-md-4\\\">\\n                    <b>Test cases:</b> {{testResult.totalTests}}\\n                </div>\\n                <div class=\\\"col-md-4\\\">\\n                    <b>Test cases passed:</b> {{testResult.passedTests}}\\n                </div>\\n                <div class=\\\"col-md-4\\\">\\n                    <b>Test cases failed:</b> {{testResult.failedTests}}\\n                </div>\\n                <div class=\\\"col-md-4\\\">\\n                    <b>Accuarcy% of Chatbot:</b> {{((testResult.passedTests/testResult.totalTests) * 100).toFixed(2)}}%\\n                </div>\\n                <div class=\\\"col-md-4\\\">\\n                    <a href=\\\"\\\" (click)=\\\"generatePDF($event)\\\">Export to Excel</a>\\n                </div>\\n            </div>\\n        </ng-container>\\n        <div class=\\\"row\\\">\\n            <table class=\\\"table table-responsive table-hover rounded tableData\\\" *ngIf=\\\"tableView\\\" id=\\\"resultTable\\\">\\n                <thead class=\\\"thead-dark\\\">\\n                    <tr>\\n                        <th scope=\\\"col\\\">Query</th>\\n                        <th scope=\\\"col\\\">Expected Result</th>\\n                        <th scope=\\\"col\\\">Actual Result</th>\\n                        <th scope=\\\"col\\\">Result</th>\\n                    </tr>\\n                </thead>\\n                <ng-container *ngFor=\\\"let data of resultVal\\\">\\n                    <ng-container *ngIf=\\\"data.resultValue == 'success' \\\">\\n                        <tr class=\\\"table-success\\\">\\n                            <td scope=\\\"col\\\">{{data.queryText}}</td>\\n                            <td scope=\\\"col\\\">{{data.expectedResult}}</td>\\n                            <td scope=\\\"col\\\">{{data.actualResult}}</td>\\n                            <td scope=\\\"col\\\">{{data.resultValue}}</td>\\n                        </tr>\\n                    </ng-container>\\n                    <ng-container *ngIf=\\\"data.resultValue == 'failure' \\\">\\n                        <tr class=\\\"table-danger\\\">\\n                            <td scope=\\\"col\\\">{{data.queryText}}</td>\\n                            <td scope=\\\"col\\\">{{data.expectedResult}}</td>\\n                            <td scope=\\\"col\\\">{{data.actualResult}}</td>\\n                            <td scope=\\\"col\\\">{{data.resultValue}}</td>\\n                        </tr>\\n                    </ng-container>\\n                </ng-container>\\n            </table>\\n        </div>\\n    </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// F:/chatbot-aoto-testing/src/app/app.component.html\n// module id = ../../../../../src/app/app.component.html\n// module chunks = main","import { Component } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { Angular2Csv } from 'angular2-csv/Angular2-csv';\nimport {read, IWorkBook} from 'ts-xlsx';\nimport {IWorkSheet} from 'xlsx';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  baseUrl = 'https://api.dialogflow.com/v1/query?v=20150910';\n  accessToken = '4d93317815ac459da6f2783287b5f375';\n  testSet = {};\n  resultVal: Array<any> = [];\n  counter = 0;\n  tableView = false;\n  testResult = {\n    'totalTests': 0,\n    'passedTests': 0,\n    'failedTests': 0,\n    'accuracyPercentage': 0.0\n  };\n  constructor(private http: HttpClient) { }\n\n  startTesting() {\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', 'Bearer ' + this.accessToken);\n\n    for (let key in this.testSet) {\n      if (this.testSet.hasOwnProperty(key)) {\n        this.http.post(this.baseUrl, JSON.stringify({ query: key, lang: 'en', sessionId: 'abc123' }), { headers })\n          .subscribe(res => {\n            this.validateResults(res, this.testSet[key], key);\n          },\n          err => console.log(err));\n      }\n    }\n\n    this.tableView = true;\n  }\n\n  validateResults(res, eR, query) {\n    this.counter = 0;\n    this.testResult.totalTests = this.testResult.totalTests + 1;\n    if (res.result.fulfillment.speech == eR) {\n      const jsonRes = {\n        'queryText': query,\n        'expectedResult': eR,\n        'actualResult': res.result.fulfillment.speech,\n        'resultValue': 'success'\n      };\n      this.resultVal.push(jsonRes);\n      this.testResult.passedTests = this.testResult.passedTests + 1;\n    } else {\n      const jsonRes = {\n        'queryText': query,\n        'expectedResult': eR,\n        'actualResult': res.result.fulfillment.messages[0].speech,\n        'resultValue': 'failure'\n      };\n      this.resultVal.push(jsonRes);\n      this.testResult.failedTests = this.testResult.failedTests + 1;\n    }\n    this.counter++;\n  }\n\n  generatePDF(e) {\n      e.preventDefault();\n      const date = new Date().toDateString();\n      const head = ['Query', 'Expected Result', 'Actual Result', 'Result'];\n      const title = 'Chatbot testing report';\n      const options = {\n      showTitle: true,\n      showLabels: true,\n      headers: head,\n      title: title\n  };\n  // tslint:disable-next-line:no-unused-expression\n  new Angular2Csv(this.resultVal, 'Chatbot report ' + date, options);\n  }\n\n  upload() {\n    const point = this;\n    const file = (<HTMLInputElement>document.getElementById('fileForUpload')).files[0];\n    if (file && file.type === 'text/plain') {\n      const reader = new FileReader();\n      reader.readAsText(file, 'UTF-8');\n      reader.onload = function (evt) {\n         point.testSet = JSON.parse(evt.target['result']);\n      };\n      reader.onerror = function (evt) {\n         console.log(evt.error);\n      };\n  } else if (file && file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') {\n    const reader = new FileReader();\n    reader.readAsBinaryString(file);\n    reader.onloadend = function (evt) {\n      const wb: IWorkBook = read(evt.target['result'], {type: 'binary'});\n      const strlen = (wb.Sheets.Sheet1['!ref']).split('B');\n      for (let i = 1; i <= strlen[1]; i++) {\n        const jsonKey = (wb.Sheets.Sheet1['A' + i]).v;\n        const jsonValue = (wb.Sheets.Sheet1['B' + i]).v;\n        point.testSet[jsonKey] = jsonValue;\n  }\n  };\n}\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// F:/chatbot-aoto-testing/src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {HttpClientModule} from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// F:/chatbot-aoto-testing/src/app/app.module.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// F:/chatbot-aoto-testing/src/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n\n\n// WEBPACK FOOTER //\n// F:/chatbot-aoto-testing/src/main.ts"],"sourceRoot":"webpack:///"}